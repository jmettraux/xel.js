
{ "a" } != { "a" } ⟶   false
{ "a" } != { "b" } ⟶   true
{ "a" } = { "a" } ⟶   true
{ "a" } = { "b" } ⟶   false
{ "a", "b" } != { "a" } ⟶   true
{ "a", "b" } != { "a", "b" } ⟶   false
{ "a", "b" } = { "a" } ⟶   false
{ "a", "b" } = { "a", "b" } ⟶   true
{ 1, "a", "b", "c" } ⟶   [ 1, "a", "b", "c" ]
{ 1, 2 } + { "a", "b" } ⟶   [ 1, 2, "a", "b" ]
{ { "a", "b" }, { "c", "de" } } ⟶   [ [ "a", "b" ], [ "c", "de" ] ]
{ { "a", 1 }, { "c", 2 } } ⟶   [ [ "a", 1 ], [ "c", 2 ] ]
{ "a", "b", "c" } ⟶   [ "a", "b", "c" ]
{ "a","b" } ⟶   [ "a", "b" ]

LET(price, 100, count, 3, count * price) ⟶   300
LET(price, 95, count, 3, 12, count * price) ⟶   285
LET(price, 13, LOWER("COUNT"), 3, count * price) ⟶   39
LET(l, LAMBDA(a, b, a + b), l(2, 3)) ⟶   5
LET(_l, LAMBDA(a, b, a * b), _l(2, 3)) ⟶   6

MROUND(51, 3) ⟶   51
MROUND(50, 7) ⟶   49
MROUND(50, 3) ⟶   51
MROUND(10, 3) ⟶   9
MROUND(10, -3) ⟶   nil
MROUND(-10, 3) ⟶   nil
MROUND(-10, -3) ⟶   -9
MROUND(0, 3) ⟶   0
MROUND(10, 0) ⟶   nil
MROUND(10.5, 0.3) ⟶   10.5
MROUND(5, 3) ⟶   6
MROUND(4, 3) ⟶   3
MROUND(10.5678, 0.05) ⟶   10.55

  # need MROUND2 for the job, but why again?
  #
MROUND2(51, 3) ⟶   51
MROUND2(50, 7) ⟶   49
MROUND2(50, 3) ⟶   51
MROUND2(10, 3) ⟶   9
MROUND2(10, -3) ⟶   nil
MROUND2(-10, 3) ⟶   nil
MROUND2(-10, -3) ⟶   -9
MROUND2(0, 3) ⟶   0
MROUND2(10, 0) ⟶   nil
MROUND2(10.5, 0.3) ⟶   10.5
MROUND2(5, 3) ⟶   6
MROUND2(4, 3) ⟶   3
MROUND2(10.5678, 0.05) ⟶   10.55

